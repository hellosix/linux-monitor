package com.lzz.util;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by gl49 on 2017/11/7.
 */
public class SQLBase {
    private static final Logger logger = Logger.getLogger(SQLBase.class);
    private volatile JdbcTemplate jdbcTpl;

    /**
     *  插入一条数据
     * @param sql
     * @return 插入的 ID
     */
    public int baseInsertId(String sql){
        KeyHolder keyHolder = new GeneratedKeyHolder();
        jdbcTpl.update(new PreparedStatementCreator() {
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException
            {
                PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                return ps;
            }
        }, keyHolder);
        return keyHolder.getKey().intValue();
    }

    public int baseInsert(String sql){
        return jdbcTpl.update(sql);
    }

    public int baseUpdate(String sql){
        return jdbcTpl.update(sql);
    }

    /**
     * 获取 roles 列表
     * @return
     */
    public List baseSelect(String sql){
        return jdbcTpl.queryForList(sql);
    }

    public boolean  baseDelete( String sql ){
        int i = jdbcTpl.update( sql );
        boolean res = false;
        if( i > 0 ){
            res =  true;
        }
        return res;
    }

    public Map baseSelectRow(String sql ){
        Map map;
        try{
            map = jdbcTpl.queryForMap( sql );
        }catch (Exception e){
            map = null;
        }
        return map;
    }

    public void setJdbcTpl(JdbcTemplate jdbcTpl) {
        this.jdbcTpl = jdbcTpl;
    }

    public static String groupStr (Object o, String table, String type, List filterFields){
        String sql = "";
        Field[] fields=o.getClass().getDeclaredFields();
        List field = new ArrayList();
        for(int i=0; i<fields.length; i++){
            Field f = fields[i];
            String name = f.getName();
            if( !filterFields.contains( name ) ){
                String tmp = "cast(" +type + "(" + name + ") as decimal(20,2)) as " + name;
                field.add( tmp );
            }
        }
        String fieldStr = StringUtils.join( field, "," );
        sql += fieldStr + " from " + table;
        return sql;
    }

    public static String insertStr(Object o, String table){
        String sql = "insert into " + table;
        List field = new ArrayList();
        List values = new ArrayList();
        try {
            Field[] fields=o.getClass().getDeclaredFields();
            for(int i=0; i<fields.length; i++){
                Field f = fields[i];
                String name = f.getName();
                f.setAccessible(true);
                field.add( name );
                String tmp = "";
                String type = f.getGenericType().toString();
                if( type.equals("class java.lang.String") ){
                    tmp = "'" + f.get(o) + "'";
                }else{
                    tmp = String.valueOf( f.get(o) );
                }
                values.add( tmp );
            }
            String fieldStr = StringUtils.join( field, "," );
            String valueStr = StringUtils.join( values, "," );
            sql += "(" + fieldStr + ") ";
            sql += "values (" + valueStr + ")";
        }catch (Exception e){
            logger.error( e );
        }
        return sql;
    }

    public void baseInitDb(){
        // 创建 node 表
        jdbcTpl.execute("create table if not exists docker_container(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY," +
                "image varchar(255)," +
                "team varchar(30)," +
                "ip varchar(25)," +
                "container_id varchar(255)," +
                "service varchar(50)," +
                "name varchar(50)," +
                "cmd varchar(255)," +
                "add_time BIGINT)");

        jdbcTpl.execute("create table if not exists service_image(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY," +
                "image varchar(255)," +
                "tag varchar(30)," +
                "filename varchar(30)," +
                "describe varchar(255)," +
                "team varchar(30)," +
                "add_time BIGINT)");

        jdbcTpl.execute("create table if not exists service_node(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY," +
                "image varchar(255)," +
                "tag varchar(30)," +
                "name varchar(30)," +
                "team varchar(30)," +
                "username varchar(30)," +
                "password varchar(30)," +
                "ip varchar(30)," +
                "port int," +
                "service varchar(30)," +
                "start_service varchar(255)," +
                "stop_service varchar(255)," +
                "install_path varchar(255)," +
                "add_time BIGINT)");

        jdbcTpl.execute("create table if not exists query_redis(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY," +
                "team varchar(30)," +
                "ip varchar(30)," +
                "port int," +
                "dbname varchar(30)," +
                "service_name varchar(200)," +
                "key_name varchar(400)," +
                "key_format varchar(400)," +
                "add_time BIGINT)");
    }

    public static String getNodeInfoTableName(String table){
        return  "node_info_" + table.trim().toLowerCase();
    }

    public void dropNodeInfoTableTemplete(String table){
        String dropSql = "drop table if exists " + table;
        jdbcTpl.execute( dropSql );
    }

    public void initMonitorTables(){
        jdbcTpl.execute("create table if not exists linux_nodes(" +
                "id int auto_increment primary key," +
                "ip varchar(30)," +
                "username varchar(30)," +
                "password varchar(30)," +
                "groups varchar(255)," +
                "add_time BIGINT)");

        jdbcTpl.execute("create table if not exists linux_monitor(" +
                "id int auto_increment primary key," +
                "load_average float," +
                "memory_total int," +
                "memory_available int," +
                "memory_free int," +
                "memory_use int," +
                "processor int," +
                "netstat int," +
                "ps_num int," +
                "thread_num int," +
                "top_1 varchar(1000)," +
                "top_2 varchar(1000)," +
                "top_3 varchar(1000)," +
                "ip varchar(30)," +
                "service varchar(255)," +
                "day int," +
                "hour int," +
                "minute int," +
                "add_time BIGINT)");
    }

    public void createNodeInfoTableTemplete (String table){
        String createSql = "create table if not exists " + table + "(" +
                "id int auto_increment primary key," +
                "connected_clients BIGINT," +
                "blocked_clients BIGINT," +
                "used_memory BIGINT," +
                "used_memory_rss BIGINT," +
                "used_memory_peak BIGINT," +
                "mem_fragmentation_ratio float," +
                "aof_enabled BIGINT," +
                "total_connections_received BIGINT," +
                "total_commands_processed BIGINT," +
                "instantaneous_ops_per_sec BIGINT," +
                "total_net_input_bytes BIGINT," +
                "total_net_output_bytes BIGINT," +
                "instantaneous_input_kbps float," +
                "instantaneous_output_kbps float," +
                "rejected_connections BIGINT," +
                "sync_full BIGINT," +
                "sync_partial_ok BIGINT," +
                "sync_partial_err BIGINT," +
                "expired_keys BIGINT," +
                "evicted_keys BIGINT," +
                "keyspace_hits BIGINT," +
                "keyspace_misses BIGINT," +
                "pubsub_channels BIGINT," +
                "pubsub_patterns BIGINT," +
                "latest_fork_usec BIGINT," +
                "migrate_cached_sockets BIGINT," +
                "used_cpu_sys float," +
                "used_cpu_user float," +
                "used_cpu_sys_children float," +
                "used_cpu_user_children float," +
                "total_keys BIGINT," +
                "expires BIGINT," +
                "avg_ttl BIGINT," +
                "response_time BIGINT," +
                "clusterid varchar(50)," +
                "nodeid varchar(255)," +
                "host varchar(30)," +
                "ip varchar(25)," +
                "port int," +
                "day int," +
                "hour int," +
                "minute int," +
                "add_time int)";
        jdbcTpl.execute( createSql );
    }
}
